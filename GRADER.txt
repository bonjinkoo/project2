                                     GRADER

Name of student running submit: Bon Jin Koo HERRO
Login of student running submit: cs61b-kz

Second team member's name: Joe Choi
Second team member's login: cs61b-ma

Third team member's name (if any):
Third team member's login:

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the machines in the Soda CS 61B lab?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.


Classes:

MachinePlayer- SELF-SUFFICIENT!!
Board [][]int- make sure to have WHITE, BLACK, EMPTY (and you can't use the corners!)
ListOfMoves- DList
Connections- pass in as WHITE or BLACK (SUGGESTION: MOVE TO Board) (Potentially put a lot in Board but not too much)


AlphaBetaPruning- go down one path, hit end, go back up
Evalation- with minimax, looking at the end state


Valid Move Checker 
===================
Teammate: Bon Jin
Classes: (each has its own board memory)
  - MachinePlayer
  - Referee 
  - Board ([][]int)

Methods:
  
  MachinePlayer

    // Makes its move and sends to Referee by calling setBoard
    public Move chooseMove();

    //Makes its move and sends to Referee by calling setBoard
    public boolean opponentMove(m);

  Referee
    // Receives Move to set it on a temporary board. After setting the board,
    // Referee calls its private isLegal method. If legal, set board. If illegal,
    // don't and end game. 
    public Move setBoard(Move m);

    // Receives the move from setBoard method and checks if the board with
    // the move is legal. Returns true if the move is legal. Returns false if
    // the move is illegal.
      private boolean isLegal(Move m);

Valid Move Generator
=====================
Teammate: Joe
Classes:
  - MachinePlayer
  - ListOfMoves (extends MachinePlayer)

Methods:

  ListOfMoves

    // Gets the board from the Referee.
    public void getCurrentBoard(Board b);

    // Goes to the current board state, goes through every cell in the board
    // and checks ifLegal. 
    public Move[] allValid(Board b);

    // Returns if input Move is legal.
    public boolean ifLegal(Move m);

  MachinePlayer

    // This module will be used in chooseMove to find the most optimal, legal move. 

Connection Finder 
==================
Teammate: Bon Jin
Classes:
  - Board
  - Connections

Methods:

  Connections

    // Checks every chip in the board of color black; if that chip is in North-South-East-West-Diagonal direction (only makes connection ,
    and its different than the previous direction (use a temp variable) and not isBlocked than store that set of points into the array
    public [][]Moves allConnectionsBlack(Board b);

    // Checks every chip in the board of color white; if that chip is in North-South-East-West-Diagonal direction,
    and its different than the previous direction and not isBlocked than store that set of points into the array
    public [][]Moves allConnectionsWhite(Board c)

    //if a path between two points is blocked by a chip of the opposite color return false
    //else return true
    public boolean isBlocked(move x)


Network Finder
===============
Teammate: Joe
Classes:
  - Connections

Methods:

  // Checks the array from connections and sees if any of them fulfill the requirements to be
  // a network. (checks if network is 6 pieces or longer)... also checks if both goal posts are
  // part of the network
  public boolean isNetwork([][]moves x); 


Evaluate Board
===============
Teammate: Bon Jin
Classes:
  -Board
  -MachinePlayer

Methods:
  
  // Takes in a board and sees possible moves to assign points, thus evaluating the board to either
  // be in favor of a win or a loss for a given player.
  public void evaluate(board gg)

  //will be used inside MachinePlayer's chooseMove to optimize his next move

Minimax
========
Teammate: Joe
Classes:
  -Minimax
  -MachinePlayer

Methods:

  // Helps with the evaluation module and determines whether or not it needs to keep on searching 
  // through the game tree. (the purpose is to run through all current players possible moves 
and the next players possible moves and so forth)
  public void minimax();

  //this will be used inside of chooseMove of our MachinePlayer
